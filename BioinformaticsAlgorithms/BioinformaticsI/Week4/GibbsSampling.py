from Bio.Seq import Seq
from Bio import motifs
import random
import numpy as np
import math

def GetRandomMers(dna,k):
    random_mers = []
    for string in dna:
        random_mers_string = [] 
        for i in range(len(string) - k + 1):
            random_mers_string.append(string[i:i+k])    
        random_mers.append(random.choice(random_mers_string))
    return random_mers
    

def Profile(mers):
    mers_bp = [] 
    for mer in mers:
        mers_bp.append(Seq(mer))
    m = motifs.create(mers_bp)
    wm = m.counts.normalize(pseudocounts = 1)
    return wm

def HammingDistance(p,q):
    distance = 0
    for i in range(len(p)):
        if p[i] != q[i]:
            distance += 1
    return distance

def Score(motifs_):
    consensus = str(Consensus(motifs_))
    score = 0
    for motif_ in motifs_:
        score += HammingDistance(motif_,consensus)
    return score

def Consensus(motifs_):
    motifs_bp = [] 
    for motif_ in motifs_:
        motifs_bp.append(Seq(motif_))
    m = motifs.create(motifs_bp)
    return m.consensus

### weighted random from mers, where the weight is proportional to the entropy

def GetMotif(string,k,profile):
    all_mers = [] 
    entropies = [] 
    for i in range(len(string) - k + 1):
        mer = string[i:i + k]
        entropy = 1
        ix = 0
        for u in mer:
            entropy *= profile[u][ix]
            ix +=1
        all_mers.append(mer)
        entropies.append(entropy)
    weighted_ = [] 
    for value in entropies:
        weighted_.append(round(-math.log(value)))
    
    weighted_choice = [] 
    for ix in range(len(all_mers)):
        for _ in range(weighted_[ix]):
            weighted_choice.append(all_mers[ix])

    return random.choice(weighted_choice)
    
def GibberSampling(dna,k,t,N):
    Motifs = GetRandomMers(dna,k)
    best_motifs = Motifs[:]
    for _ in range(N):
        i = random.choice(np.arange(t))
        Motifs.remove(Motifs[i])
        profile = Profile(Motifs)
        motifi = GetMotif(dna[i],k, profile)
        Motifs.insert(i,motifi)
        if Score(Motifs) < Score(best_motifs):
            best_motifs = Motifs
    return best_motifs

dna = 'CGCCCCTCTCGGGGGTGTTCAGTAACCGGCCA GGGCGAGGTATGTGTAAGTGCCAAGGTGCCAG TAGTACCGAGACCGAAAGAAGTATACAGGCGT TAGATCAAGTTTCAGGTGCACGTCGGTGAACC AATCCACCAGCTCCACGTGCAATGTTGGCCTA'
k,t,n = 15,20,2000
GibberSampling(dna.split(' '),k,t,100)
dna = 'TATGTCCCTTAGTCGGCACCTCAGCAACGTCTCTTATTTCCGTCCTCGACCAACACTCCCAGCCACTTATCCGTTTTATGGACGGGGATCTAGCTTTATTAGTCACCACCGGTACCCCAGGTTGCTACAAGAATATGTACCGAGCGTGAAACGGGTCGCCATGCGGTCGAACAAATTATAATGCACAGCATGGTTATTTCCTTTTGCTGCTTCGCAAGCCTAAGACGGAGTACTTTCCACAAACGGCTGTCCTGTGGCGTTTACGGAGCGTGACGTAGGCTGGGTGCTCACCGCGTCCATCTCATTATGTCCCTTAGTCG GCACCTCAGCAACGTCTCTTATTTCCGTCCTCGACCAACACTCCCAGCCACTTATCCGTTTTATGGACGGGGATCTAGCTTTATTAGTCACCACCGGTACCCCAGGTTGCTACAAGAATATGTACCGAGCGTGAAACGGGTCGCCATGCGGTCGAACAAATTATAATGCACAGCATGGTTATTTCCTTTTGCTGCTTCGCAAGCCTAAGACGGAGTACTTTCCACAAACGGCTGTCCTGTGGCGTTTACGGAGCGTGACGTAGGCTGGGTGCTCACCGCGTCGATCCCACGTTGCAGCATCTCATTATGTCCCTTAGTCG TGTTGGTAGTGCAAGACTGCAATTGGTACCAAGCACAACTGCATCCATTACCGATCGAGGTTTTACGCAAACCTTTTGTTAAACGAGGTTAAACTTAGAGTTTATAACAGAATCGCGCGTTGAAGGGTGGGAAGTGTAAGAAAACGATACACACCCGTGTGGAGGATAGGCTTGACATCATCCTTCTAGAGTTAAACCAAAATCAAGGTTCAGGAATTTACGTTGCAGAGGTCGGATAGCCTAAGAGACATCGATGGGGCTCCCCGAGCGATTGACAACGAAGTTCCTTCTCCGGTCAGCATTAACCCTACAGTTGCTGT GACATGCCATACCGAAAGCACGCATCGGAACGCGTCTGGCTAGGAGGTGCCCCTAGCAGTGAAATACAGGAATCTAATATACTATTCAGTGGGAGATACGTACCAGCCGGCGCTAGGATAGGGTGGAGTGTAGAAAGGCCAAGGTGAACTGTGTGCAAGGTGACTGGGGGGATAATGGCTTGCAGTAAGATAGCTACAGGCATTAGGATTTGATGTAGACCAGTTCTTGTCAGCCAAAAGCCCTCAGGCTGCGTTAAGTGATACGGTGGTGGCTTAAAGCGATTGTCTGACCACGATACGGTTCATACACAGATTAGAGA GCCTACCAGCTAACTTGCTATTTGATGGTCGAACAGTCGGATGGGCTACTCCTTCGTTGGGTTAGCGCTGCTTGTCGAGTGCAAGCCCTCCTGTTGCCTCCTGGCTCGTAACGGTAGCACCATTACGAACGAACTTTACAACTCTCGTGACACTTAATCGAAGGCAGCAGCGGGTACAGCCGGGGCAAAGTCTGAAGGGCTTTAGATTGCACGTTGCAGATATGATCATTCGCCCCTTCTTATGCAACTCCAGACGTGGCCCAGGGAGAGGTGATGGACCGCCTTTTCAGCTCTGGTGCCATTAATTTACGCAACACTGA TGGAAGATCCACTTCCTTTCTTGACCGAGGAGCGATGCTGATTTGAGTCGTCCTTTTACTACCAAAGTGTTCGTTAAGACCCTCAATATAAATCTTCAGATATTTCACACACTAAGCCACAACTTGAGCTGCTATGAATTCTGGCAATCGAGCCTACCCCCTTTAATCCGGATTGCATCTCCCGTGGTTCAAGACCAATGGGAAAACTCACGGAACCGGCCCGGGATGCGACGCACAGTCGCTTTGCTAGCAAATTCGGCGCTCGAGGTGATACGGCGTTGCAGTGGCGCTTCCACGCAAACGCGTGTCTTCCCGTTCTG GTTCACTATTGATTATAAATCAATGGGCTGGAGTCGATCATAGGCGAGATAAAGAGTTGCAGCTCGCTACTTGTCGAATCTGTAATGTCGAAATGTTATAGTCTCCGGAAGATCACTAAATAGAGTTGGCCGATACCCCATGCCACGGTGACGGTCGAGAATAACGATTTTGTATGAACATTTTAATCTCACTTTTCAGTGTTTCTGCGTACTATGCGCGTCCCTACCGACATTCGCGTGCTTGGCCACTTCAACCACTTCAGGCACGCCTCCTCCTTAGCGCTTGGTAAAGTTGGAGAACCTGCAATACCGCCTGATGG GTCAGGCATGTGCGACCACCTCTCACTCGACTATCTCGGAAGATTCGAGAACCTATATCCAGTAAAAATTACAAATCTTTGGAATACCGACCGGCCTCGGCGTTCCTTGATCATCCGTGTTGTACCGCTTCGCCTAATGTTTGAATAGAATCCCGATACGGTAGTGCGAAGGGTTGAATGGTTACGGGATGAATACGTTGCAGCCCCATAGTCATCCTTCCATCCCGAGAACAGCCATGTATTGTGAAGAACTAAATGTCTGGTTCGGTCGAGTACTAGCTCGGCCTCTTACTTGTCGCATAGGAGAGCGAGCTCAGGGC GTCTTCATTAAGGAGCGTCCACAGGAGTCATCCGCCGTCATATCATATAATACATCGAGGTGCAAATGCTACCCTTGAATACATTTGCTGGGAGGAACAAGTCATTATGGAACGCTTCCAGTTAGCTTCTGATAATACGTTGACCGTTAATGAATCCTCACCGGACTGTTTTAAACCTCTTGGTCAAAAATCGCAAACCCCACTTCAACCACGGGCTCTCCGCGCGAGAACACAGGAGTACCCACCTCGTACGGGGGCTGGTGAGGCCAGGTTCCGGAATCCATGTAGATGCAGAGAAGTCGTGGCATCACGATTATAGA CACGGCTAAACCCACTCGTGACTTATACAGCGGCAACCCTGGTATGCTCATTTGAGGCAAGCCGCTGGTCTACCCGTGATGCCGAGCGAAAATAACGCATTCAGAAGCGCTCGGGTCGGCTTTGTGCTAGGCGTACTCGGGTTGGGACGCGTGGCCGACCCCTCCCACTGATGTCTATGGGTGCTGCATGTCCGGAACTGTGCTTTTACGGATGAGAATACGGGCGATGCGTAAATTGTAACATCGAATCGAGTCATGATGCTCGTTTAGTTGCTGTTAGATAAGCAGTTGCAGGTAGAGCGATTCTCTATTCTTGTGTT CACCATAGAAGTCTCGTCCGTACTACGGCCCACCGTAACTGCTATTTACCTAGTACCTATGATGTAGTCTAATGCCGCGAAACATTCTCGGTAACGCGACTGCATGCTTCATCAGAAACACTTGCTTGGGGGTCTGCTGATCTACCCTATATCGTGTATACGTTGCAGAAAAGCGGGTCACCCGCCGGCTACCTTAGAATGGCCGACTTTATCTCCGGGAAGTACGATTTCGGGATCACTCGTCAAGTATACGGTTCGGAGTCGCAACACATGTAGCGCCGTAGGCTGTCTTAAATTCCGTTAGTCTTTTGCTTGCGCAG TGAACCGCGCCTTTGTATCCAGATAAGGTGAATCGTTAACTATCTCTCGGCGAGATTCTTTTACGACGTCTATTTGATCAGGCCTAAGCCACCATATCACGAGTGTAGTGTTTTTGGGATAATACGTTTAGGGGACACAAGGATCATCGAGTCATATAATTCGCTGCGCGATTTCTCCAGAGAAAAACGAGCTTCCCACCTGCCTGGTCAACGGAATCACGGGCCGCTAGATCCAATGGCACCGCGTCCTGCTGCGCTCAGCTCTCGCTCACCAATTTGTCTGCGGAGAAACATACTGTTCAACAATGGGGCTGAGCGGT TGATTACGCGAAAGTAGTTTACTGGCCTGTAAGTGGTGTGTCCCCCGTTCAGTTGGTATTGGATTCGGGGAGGATTAACAATCTAGGCGGAAGATGCGCATACGGCGATATGCCCCAACGGAGGTTAGTGGGGGACTGTCGCGGTAGATATGGAGGGTTTGGAGCTCCAGCTGAAGGTAATGCCCTGAACATATATCCATACTTCAGTGCGGTGGTATCGATGGGAATCGCCTTGTGGGGTCTTCGGGTGGATTCATCTGGACGAGCATTCCTTTTTATCGCTAGATAATACGTAAGAGAACTAGTGCCTGTGCACGTTC TCATGGACTGCCACTCGTCAGAGGGTTCTTCACGCGGACAAACGCACCCGGACGCTTTGTGTGCGCTTAGACAACAGCTGTTAGGACTCGATATCCGTGCCGGAACCACGTACTATCAGCCGCCAGTGCTCACGCTCATGACCCACGCACATGCTGTGGGTGTGCTTCACTTTATAGAGAACTACGGATTTACCGTCTAATCATTGGGGTCATTCTCACCTAACTGAGGGTTGTACAATATCACAAATATTTGTCCTTCGCTCGTTCGAATTATAAACGACAGTGAAGATAGCTCGTTGCAGCCCCGTTACACGAATTTT GAAAGAAACGTCATGGTATGAAAATCTCAGGCGTCAAGCCCAAACCGTTGCTCTTGAGGACGATAGTGTCGCTCCAGCTCCTGTGGGACATAACTAACTAAGGACATGACCACAGCTTGGCAAGACACGTATCACTCGCCGCTTTACTCTAAAGGATTACAGTTCAACTATGATTCCCTGTAAGGGGATTAGTCAAGGGGACCTGTGTTAACCTACAATTGTCAATCCGGCCTGATTTTCCGGTGGTGAGGCCCAATTCGGGCGGTGGACCCCAAAGTGCATAGGATAATACCAGGCAGCCCGACGGCGAGAGGGGCCGT AGACCCCACGCGCTATCCGTTACGATTCTTTACCGGCCGCAGGACCGTATACCTTGAATACAGCTCAGATCTCAGTTTCATTCGCTACTGCGTGGACAAGCATGGTTCCGTAGTGACATGATGGCGTCGAGTTTCCGACCCCCTGCGAGAGTTTATCGTCGTTTTAGCCGAGAAACGTGATTGCCCCGGTGGCTCCTTTCGTAGGGGCGCCGTGCAGCTAGTCAAAGAAGTGACTCCTAACGAAGTTTCGTAAGGGATGTCCGACACCCTACGATAATGGTTTGCAGTTGGAAGTCACAGTAGAGTAGCGGTCCTTTGCT AGCTAGTACTATTGGATCTAAGTTGTTCCCCTGTGGAAGCGAAGCTAAACTTGGATAATACGAGCCAGTCTGGTTCGAAAGAGGTACAACCGTCGCAATACAACATCTCGCATTCGGGACGGTGAGGATTGAGACTATCGCTATGCCGTTCCTGTTATCTCAGCAAGCTGGTTGCCCGTAATCCGCTGTTACGAGATTCTACTATACGTGTAGTGAGCTCGCCGGTACCGGCAAAGTCTCGCTACCGTGACATCACTGGCCCCCGGAATGGAAGAAACTGCATCGAATTGGCCCACGATGTCACACAGCGTACAACTTGA ACCTCTCTTAGGTGGCACGATCGTGATCTATAATTCATTGAGATAAAATACTGAGAAAGAAGAAGAAATTTCAGCGCTGGCGGTTCCAGGAACCCAATGTGTCTAACATGTTACGCTTCTAAGTGTACTAATACGTTGCAATGTCTTTGGCGCTTTCCAAGAACAGCCTTGCCATCAGTGCAATGCAGAAGGAACAACCCTCAGAGCCCCGGATGGGCTCGAGTGACGGTTCGGGGCAGCTGTTATCCGATTCCGTAACGCGAGGCATACATCGCTATAACACGTTCAGAAGTCTGCGCCCATCTGCTCTTTCTGACCCA CACGCGAATGGTCTAGGGGCATGACAGTGGGGTGTGTTTGTCCAGGCAGCGAACCAACCACATTACACGTACATACGGTTGACGTGAGTCGGAGTCGCACATATATCACCACATAACTCAACAGTCCGGCATGACTCATAATACGTTGCTAAGAATCCGCTCTCAGTCCTAACCAGCTCGGAATAAAGTCGCAGTTCCGAAACTCGATTGGGGTGAACAACAGAGCTGAACTCGCGGAATCAGTGTTTGGCGTGGCCACAGGCACCTAGTTTCGCTACTTCAGGGCTGGCAACAAATACACTCCTGGCGGCCGCTGTAAT GCGCATCCTTTAGGCCACAAACTGTGGCATTCCCCTGTGGCGCCATTACGACGCCAAGCTAGGAAGGTGGCCAACGTTTGACGATAATAGTATGCAGGAGGGGAAGATGCATAGCCCCAGGAGGGCCGGCTAGAGCCCCGTAGAAAGCAAGGCGTGCGCGGCCTGCGGGAGATCGTGATATAAGCTGGAAACGTCCAAAATGCGTAACCCAACCTCGGTAAAGAACGTCTCCTAACACAATTACTCGCACGCCTGCGCTGGCCATTCAACAATAAATACGCACTGACCAGCTGTTTGGACTGACGCTTTCAGGTGGAGCC'


def Algorithm(dna,k,t,N):
    motifs = GetRandomMers(dna,k)
    for _ in range(1000):
        ans = GibberSampling(dna,k,t,N)
        if Score(ans) < Score(motifs):
            motifs = ans
    return motifs

Motifs = GetRandomMers(dna.split(' '),k)
Motifs.remove(Motifs[1])
profile = Profile(Motifs)
GetMotifs = GetMotif(dna.split(' ')[1], k, profile)
GetMotifs